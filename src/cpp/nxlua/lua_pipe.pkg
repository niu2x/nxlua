$#include "lua_pipe.h"
$#include "nxlua/pipe.h"

$using namespace nxlua::lua;
$using namespace nx::pipe::filter;

namespace pipe {

	namespace filter {

		class base64_t{
			base64_t();
			~base64_t();
		};

		class unbase64_t{
			unbase64_t();
			~unbase64_t();
		};

		class lower_t {
			lower_t();
			~lower_t();
		};

		class upper_t {
			upper_t();
			~upper_t();
		};


		class hex_t {
			hex_t();
			~hex_t();
		};

		class unhex_t {
			unhex_t();
			~unhex_t();
		};

		class cut_t {
			cut_t(unsigned char c);
			~cut_t();
		};

		class zlib_t {
			zlib_t(int level);
			~zlib_t();
		};

		class unzlib_t {
			unzlib_t();
			~unzlib_t();
		};

		class digest_t {
			digest_t(const char *algorithm);
			~digest_t();
		};

		class encrypt_t {
			encrypt_t(const char *algorithm, const unsigned char *key, const unsigned char *iv);
			~encrypt_t();
		};

		class decrypt_t {
			decrypt_t(const char *algorithm, const unsigned char *key, const unsigned char *iv);
			~decrypt_t();
		};
	};


	std::string pipe(const std::string &sz, pipe::filter::base64_t& filter);
	std::string pipe(const std::string &sz, pipe::filter::unbase64_t& filter);
	std::string pipe(const std::string &sz, pipe::filter::lower_t& filter);
	std::string pipe(const std::string &sz, pipe::filter::upper_t& filter);
	std::string pipe(const std::string &sz, pipe::filter::hex_t& filter);
	std::string pipe(const std::string &sz, pipe::filter::unhex_t& filter);
	std::string pipe(const std::string &sz, pipe::filter::cut_t& filter);
	std::string pipe(const std::string &sz, pipe::filter::zlib_t& filter);
	std::string pipe(const std::string &sz, pipe::filter::unzlib_t& filter);
	std::string pipe(const std::string &sz, pipe::filter::digest_t& filter);
	std::string pipe(const std::string &sz, pipe::filter::encrypt_t& filter);
	std::string pipe(const std::string &sz, pipe::filter::decrypt_t& filter);
};

